//#include "include_own.h"
#include  "stm32f10x.h"
#include "delay.h"
#include "lcd.h"
#include "font.h"
#include "RGB888.h"
#include <string.h>
#include <stdio.h>
//LCD的画笔颜色和背景色	   
//u16 POINT_COLOR=0x0000;	//画笔颜色
//u16 BACK_COLOR=0xFFFF;  //背景色 

//管理LCD重要参数
//默认为竖屏
LCD_DEV lcddev;                //LCD 参数设置结构体
DATA_POSITION d_p[2] = 
{
  10, 150, c1206, 0, 3,        //横坐标，纵坐标，宽度，高度， 数据长度，单位的长度
  10, 174, c1206, 0, 1
};
/*
2017年4月3日14:50:03
写命令（Write command code）；按照写命令的时序规则往“并行数据总线”写一串数据（该数据代表命令）
例如：Lcd_Write_Command(0x11)； 查阅ILI9341手册:0x11命令表示解除睡眠状态
*/
void LCD_Write_Command(u16 order)
{
  //  DATAOUT(order);
  GPIOE->CRL = PxOUTPP;//PTB_BASE_PTR->PDDR = 0xffffffff;      //设置PTB所有端口方向为输出
  GPIOE->CRH = PxOUTPP;//PTB_BASE_PTR->PDDR = 0xffffffff;      //设置PTB所有端口方向为输出
  LCD_CS = 0;
  LCD_RS = 0;                           //1-data, 0-command
  LCD_WR = 0;
  DATAOUT(order);
  LCD_WR = 1;
  LCD_CS = 1;
}
void LCD_WR_REG(u16 data)
{
  GPIOE->CRL = PxOUTPP;
  GPIOE->CRH = PxOUTPP;
  LCD_CS = 0;
  LCD_RS = 0;//写地址 
  DATAOUT(data);
  LCD_WR = 0;
  LCD_WR = 1;
  LCD_CS = 1;
}
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(u16 data)
{
  GPIOE->CRL = PxOUTPP;
  GPIOE->CRH = PxOUTPP;
  LCD_RS = 1;
  LCD_CS = 0;
  LCD_WR = 0;
  DATAOUT(data);
  LCD_WR = 1;
  LCD_CS = 1;
}
/*
2017年4月3日14:58:46
从数据总线读数据：按照读数据的时序规则控制从机往数据总线输出数据供主机读取，
返回读取到的值
*/
u16 LCD_RD_DATA(void)
{
  u32 t;
  GPIOE->CRL = PxIPU;
  GPIOE->CRH = PxIPU;
  //GPIOE->ODR=0XFFFF;
  LCD_CS = 0;
  LCD_RS = 1;
  LCD_RD = 0;
  //  DelayUs(1);
  t=DATAIN;                                             //从PDIR（端口输入）寄存器读取数据总线的“32位”数据
  //  t = (((0xff0000 & t)>>8)|((0xf80 & t)>>4) | ((0xe & t)>>1));  //只是从作为数据线PTB1,2,3, 7,8,9 10 11  16……23端口读16位数据，这些数据散布在32位“数据输入寄存器”的1,2,3, 7,8,9 10 11  16……23位上，该式将这些数据移至低16位
  LCD_RD = 1;
  LCD_CS = 1;
  
  return (u16)t;
}
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
{
  LCD_WR_REG(LCD_Reg);
  LCD_WR_DATA(LCD_RegValue);
}
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
u16 LCD_ReadReg(u16 LCD_Reg)
{
  u32 t;
  LCD_CS = 0;
  LCD_RS = 0;
  GPIOE->CRL = PxOUTPP;
  GPIOE->CRH = PxOUTPP;
  DATAOUT(LCD_Reg);
  LCD_WR = 0;
  DelayUs(10);
  LCD_WR = 1;
  LCD_RS = 1;  //读取数据(读寄存器时,并不需要读2次)
  GPIOE->CRL = PxIPU;
  GPIOE->CRH = PxIPU;
  DelayUs(10);
  LCD_RD = 0;
  LCD_RD = 1;
  LCD_RD = 0;
  t = DATAIN;
  t = (((0xff0000 & t)>>8)|((0xf80 & t)>>4) | ((0xe & t)>>1));;
  LCD_RD = 1;
  LCD_CS = 1;
  
  return t; 
} 
//LCD写GRAM
//RGB_Code:颜色值
void LCD_WriteRAM(u16 RGB_Code)
{
  LCD_WR_DATA(RGB_Code);//写十六位GRAM
}
//从ILI93xx读出的数据为GBR格式，而我们写入的时候为RGB格式。
//通过该函数转换
//c:GBR格式的颜色值
//返回值：RGB格式的颜色值
u16 LCD_BGR2RGB(u16 c)
{
  u16  r,g,b,rgb;
  b=(c>>0)&0x1f;
  g=(c>>5)&0x3f;
  r=(c>>11)&0x1f;	 
  rgb=(b<<11)+(g<<5)+(r<<0);	
  
  return(rgb);
}
//读取个某点的颜色值
//x,y:坐标
//返回值:此点的颜色
u16 LCD_ReadPoint(u16 x,u16 y, u8 *R, u8 *G, u8 *B)
{
  u32 _32bit_data;                                     //because we doctted useed pin from 1 to 31,and the data_in register is 32 bit
  if(x>=lcddev.width || y>=lcddev.height)return 0;	//超过了范围,直接返回
  LCD_SetCursor(x, y);
  //LCD_WR_REG(lcddev.wramcmd);	//开始写入GRAM
  //LCD_WR_DATA(GREEN);
  LCD_WR_REG(0X2E);//9341/6804/3510/1963 发送读GRAM指令
  GPIOE->CRL = PxIPU;
  GPIOE->CRH = PxIPU;
  LCD_RS = 1;
  LCD_CS = 0;
  LCD_RD = 0;
  DelayUs(2);									//延时		
  //  r=DATAIN;
  //  r = (((0xff0000 & r)>>8)|((0xf80 & r)>>4) | ((0xe & r)>>1));        //第一次读取的是假颜色 
  LCD_RD = 1;
  LCD_RD = 0;
  DelayUs(2);//延时
  _32bit_data = DATAIN;  	//实际坐标颜色
  _32bit_data = PORT_IN_DATA_TRANSFER(_32bit_data);
  *G = (_32bit_data & 0XFF) >> 2;               //对于9341,第一次读取的是RG的值,R在前,G在后,各占8位
  *R = _32bit_data >> 11;
  LCD_RD = 1;
  LCD_RD = 0;
  DelayUs(2);//延时
  _32bit_data = DATAIN;//读取蓝色值
  _32bit_data = PORT_IN_DATA_TRANSFER(_32bit_data);          //b在16位的高八位
  *B = _32bit_data >> 11;
  LCD_RD = 1;
  LCD_CS = 1;
  
  return (u16)((*R<<11) | (*G<<5) | *B);//ILI9341/NT35310/NT35510需要公式转换一下,8位的数据也是可以移动不小于8次的
}
//LCD开启显示
void LCD_DisplayOn(void)
{
  if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X1963)LCD_WR_REG(0X29);	//开启显示
  else if(lcddev.id==0X5510)LCD_WR_REG(0X2900);	//开启显示
  else LCD_WriteReg(0X07,0x0173); 				 	//开启显示
}	 
//LCD关闭显示
void LCD_DisplayOff(void)
{
  if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X1963)LCD_WR_REG(0X28);	//关闭显示
  else if(lcddev.id==0X5510)LCD_WR_REG(0X2800);	//关闭显示
  else LCD_WriteReg(0X07,0x0);//关闭显示 
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
  LCD_WR_REG(lcddev.setxcmd);
  LCD_WR_DATA(Xpos>>8);
  LCD_WR_DATA(Xpos);
  LCD_WR_REG(lcddev.setycmd);
  LCD_WR_DATA(Ypos>>8);
  LCD_WR_DATA(Ypos);
}
void LCD_Area_Set(u16 x0, u16 y0, u16 x1, u16 y1)
{
  LCD_WR_REG(0x2A);   //Column Address Set (2Ah)
  LCD_WR_DATAX(x0>>8);
  LCD_WR_DATAX(x0);
  LCD_WR_DATAX(x1>>8);
  LCD_WR_DATAX(x1);
  LCD_WR_REG(0x2B);   //Page Address Set (2Bh)
  LCD_WR_DATAX(y0>>8);
  LCD_WR_DATAX(y0);
  LCD_WR_DATAX(y1>>8);
  LCD_WR_DATAX(y1);
}
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为LU即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(PLCD_DEV ld)
{
  u16 regval = 0;
  switch(ld->dir)
  {
  case LU://从左到右,从上到下
    regval|=(0<<7)|(0<<6)|(0<<5);break;
  case LD://从左到右,从下到上
    regval|=(1<<7)|(0<<6)|(0<<5);break;
  case RU://从右到左,从上到下
    regval|=(0<<7)|(1<<6)|(0<<5);break;
  case RD://从右到左,从下到上
    regval|=(1<<7)|(1<<6)|(0<<5);break;
  case UL://从上到下,从左到右
    regval|=(0<<7)|(0<<6)|(1<<5);break;
  case UR://从上到下,从右到左
    regval|=(0<<7)|(1<<6)|(1<<5);break;
  case DL://从下到上,从左到右
    regval|=(1<<7)|(0<<6)|(1<<5);break;
  case DR://从下到上,从右到左
    regval|=(1<<7)|(1<<6)|(1<<5);break;
  }
  regval|=0x08;                                 //需要BGR
  LCD_WriteReg(0x36,regval);
}
//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(u16 x,u16 y, u16 color)
{
  LCD_SetCursor(x,y);		//设置光标位置
  LCD_WR_REG(lcddev.wramcmd);	//开始写入GRAM
  LCD_WR_DATA(color); 
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(u8 pwm)
{
  LCD_WR_REG(0xBE);	//配置PWM输出
  LCD_WR_DATA(0x05);	//1设置PWM频率
  LCD_WR_DATA((u8)(pwm * 2.55));//2设置PWM占空比
  LCD_WR_DATA(0x01);	//3设置C
  LCD_WR_DATA(0xFF);	//4设置D
  LCD_WR_DATA(0x00);	//5设置E
  LCD_WR_DATA(0x00);	//6设置F
}

//设置窗口,并自动设置画点坐标到窗口左上角(sx,sy).
//sx,sy:窗口起始坐标(左上角)
//width,height:窗口宽度和高度,必须大于0!!
//窗体大小:width*height.
void LCD_Set_Window(u16 sx,u16 sy,u16 width,u16 height)
{
  u8 hsareg,heareg,vsareg,veareg;
  u16 hsaval,heaval,vsaval,veaval; 
  u16 twidth,theight;
  twidth=sx+width-1;
  theight=sy+height-1;
  if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X6804||(lcddev.dir==1&&lcddev.id==0X1963))
  {
    LCD_WR_REG(lcddev.setxcmd); 
    LCD_WR_DATA(sx>>8); 
    LCD_WR_DATA(sx&0XFF);	 
    LCD_WR_DATA(twidth>>8); 
    LCD_WR_DATA(twidth&0XFF);  
    LCD_WR_REG(lcddev.setycmd); 
    LCD_WR_DATA(sy>>8); 
    LCD_WR_DATA(sy&0XFF); 
    LCD_WR_DATA(theight>>8); 
    LCD_WR_DATA(theight&0XFF); 
  }else if(lcddev.id==0X1963)//1963竖屏特殊处理
  {
    sx=lcddev.width-width-sx; 
    height=sy+height-1; 
    LCD_WR_REG(lcddev.setxcmd); 
    LCD_WR_DATA(sx>>8); 
    LCD_WR_DATA(sx&0XFF);	 
    LCD_WR_DATA((sx+width-1)>>8); 
    LCD_WR_DATA((sx+width-1)&0XFF);  
    LCD_WR_REG(lcddev.setycmd); 
    LCD_WR_DATA(sy>>8); 
    LCD_WR_DATA(sy&0XFF); 
    LCD_WR_DATA(height>>8); 
    LCD_WR_DATA(height&0XFF); 		
  }else if(lcddev.id==0X5510)
  {
    LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(sx>>8);  
    LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(sx&0XFF);	  
    LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA(twidth>>8);   
    LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA(twidth&0XFF);   
    LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(sy>>8);   
    LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(sy&0XFF);  
    LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA(theight>>8);   
    LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA(theight&0XFF);  
  }else	//其他驱动IC
  {
    if(lcddev.dir==1)//横屏
    {
      //窗口值
      hsaval=sy;				
      heaval=theight;
      vsaval=lcddev.width-twidth-1;
      veaval=lcddev.width-sx-1;				
    }else
    { 
      hsaval=sx;				
      heaval=twidth;
      vsaval=sy;
      veaval=theight;
    } 
    hsareg=0X50;heareg=0X51;//水平方向窗口寄存器
    vsareg=0X52;veareg=0X53;//垂直方向窗口寄存器	   							  
    //设置寄存器值
    LCD_WriteReg(hsareg,hsaval);
    LCD_WriteReg(heareg,heaval);
    LCD_WriteReg(vsareg,vsaval);
    LCD_WriteReg(veareg,veaval);		
    LCD_SetCursor(sx,sy);	//设置光标位置
  }
}
//初始化lcd
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
char LCD_Init(void)
{
  LCD_GPIO_Init();  
  LCD_RST_CLR;                                  //实验表明:必须复位
  LCD_RST_SET;
  DelayMs(50);
  LCD_Write_Command(0xD3);                       //读取控制芯片的ID命令; 参看ILI94341的手册
  LCD_RD_DATA();                                 //前两次读取是无用的数，参看ILI94341的手册
  LCD_RD_DATA();                                 //前两次读取是无用的数，参看ILI94341的手册
  lcddev.id = (LCD_RD_DATA()<<8) | LCD_RD_DATA();//后面的“两次“读取分别是93和41，参看ILI9341的手册
  
  if(lcddev.id==0X9341)	//9341已识别，否则为成功识别LCD返回假
  {
    Lcd_ILI9341_Parameter_Init(5, &lcddev);   //把lcddev变量里的参数与ILI9341对应起来,0-竖屏a；3竖屏b；5-横屏a；6-横屏b
    LCD_WR_REG(0xCF);   //Power control B (CFh)
    LCD_WR_DATAX(0x00);
    LCD_WR_DATAX(0xC1);
    LCD_WR_DATAX(0X30);
    LCD_WR_REG(0xED);   //Power on sequence control (EDh)
    LCD_WR_DATAX(0x64); 
    LCD_WR_DATAX(0x03); 
    LCD_WR_DATAX(0X12); 
    LCD_WR_DATAX(0X81); 
    LCD_WR_REG(0xE8);   //Driver timing control A (E8h)
    LCD_WR_DATAX(0x85); 
    LCD_WR_DATAX(0x10);
    LCD_WR_DATAX(0x7A); 
    LCD_WR_REG(0xCB);   //Power control A (CBh)
    LCD_WR_DATAX(0x39); 
    LCD_WR_DATAX(0x2C); 
    LCD_WR_DATAX(0x00); 
    LCD_WR_DATAX(0x34);
    LCD_WR_DATAX(0x02); 
    LCD_WR_REG(0xF7);   //Pump ratio control (F7h)
    LCD_WR_DATAX(0x20); 
    LCD_WR_REG(0xEA);   //Driver timing control B (EAh)
    LCD_WR_DATAX(0x00); 
    LCD_WR_DATAX(0x00); 
    LCD_WR_REG(0xC0);    //Power Control 1 (C0h)
    LCD_WR_DATAX(0x1B);  //VRH[5:0] 
    LCD_WR_REG(0xC1);    //Power control 2 (C1h)
    LCD_WR_DATAX(0x01); //SAP[2:0];BT[3:0] 
    LCD_WR_REG(0xC5);    //VCOM Control 1(C5h)
    LCD_WR_DATAX(0x30); //3F
    LCD_WR_DATAX(0x30); //3C
    LCD_WR_REG(0xC7);    //VCOM Control 2(C7h)
    LCD_WR_DATAX(0XB7);
    LCD_WR_REG(0x36);    //Memory Access Control (36h)
    LCD_WR_DATAX(0x48); 
    LCD_WR_REG(0x3A);    //COLMOD: Pixel Format Set (3Ah)
    LCD_WR_DATAX(0x55); 
    LCD_WR_REG(0xB1);    //Frame Rate Control (In Normal Mode/Full Colors) (B1h)
    LCD_WR_DATAX(0x00);   
    LCD_WR_DATAX(0x1A); 
    LCD_WR_REG(0xB6);    //Display Function Control (B6h)
    LCD_WR_DATAX(0x0A); 
    LCD_WR_DATAX(0xA2);
    LCD_WR_REG(0xF2);    //Enable 3 gamma (F2h)( 3Gamma Function Disable )
    LCD_WR_DATAX(0x00); 
    LCD_WR_REG(0x26);    //Gamma Set (26h)      (Gamma curve selected )
    LCD_WR_DATAX(0x01); 
    LCD_WR_REG(0xE0);    //Positive Gamma Correction (E0h)      (Set Gamma )
    LCD_WR_DATAX(0x0F); 
    LCD_WR_DATAX(0x2A);
    LCD_WR_DATAX(0x28);
    LCD_WR_DATAX(0x08);
    LCD_WR_DATAX(0x0E);
    LCD_WR_DATAX(0x08);
    LCD_WR_DATAX(0x54);
    LCD_WR_DATAX(0XA9);
    LCD_WR_DATAX(0x43);
    LCD_WR_DATAX(0x0A);
    LCD_WR_DATAX(0x0F);
    LCD_WR_DATAX(0x00);
    LCD_WR_DATAX(0x00);
    LCD_WR_DATAX(0x00);
    LCD_WR_DATAX(0x00);
    LCD_WR_REG(0XE1);    //Negative Gamma Correction (E1h)      (Set Gamma)
    LCD_WR_DATAX(0x00); 
    LCD_WR_DATAX(0x15);
    LCD_WR_DATAX(0x17);
    LCD_WR_DATAX(0x07);
    LCD_WR_DATAX(0x11);
    LCD_WR_DATAX(0x06);
    LCD_WR_DATAX(0x2B);
    LCD_WR_DATAX(0x56);
    LCD_WR_DATAX(0x3C);
    LCD_WR_DATAX(0x05);
    LCD_WR_DATAX(0x10);
    LCD_WR_DATAX(0x0F);
    LCD_WR_DATAX(0x3F);
    LCD_WR_DATAX(0x3F);
    LCD_WR_DATAX(0x0F); 
    LCD_WR_REG(0x11);   //Exit Sleep
    DelayMs(120);
    LCD_WR_REG(0x29);   //display on	
  }
  else
    return false;
  LCD_Scan_Dir(&lcddev);
  //  LCD_LED_OUT = 1;	/				//点亮背光
  LCD_Clear(&lcddev, WHITE);
  
  return true;
}
void	write_comm(uint8 commport)
{
  // Set TFT_nCS low
  // SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
  LCD_CS = 0;
  // Set up to access Index Register (RS == 0)
  // SetToLow(TFT_RS_Port, (1 << TFT_RS_Bit));
  LCD_RS = 0;
  // DelayUs(2);
  
  // TFT_Port = (TFT_Port & 0xFF00) | commport;
  DATAOUT(commport);
  // SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
  LCD_WR = 0;
  // SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
  LCD_WR = 1;
  
  // Set up to access Data Register (RS == 1)
  // SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
  LCD_RS = 1;
  // DelayUs(2);
  
  // Set TFT_nCS high
  // SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
  LCD_CS = 1;
}

void write_data(uint8 data)
{
  // Set TFT_nCS low
  // SetToLow(TFT_nCS_Port, (1 << TFT_nCS_Bit));
  LCD_CS = 0;
  
  // Set up to access Data Register (RS == 1)
  // SetToHigh(TFT_RS_Port, (1 << TFT_RS_Bit));
  LCD_RS = 1;
  
  // TFT_Port = (TFT_Port & 0xFF00) | data;
  DATAOUT(data);
  // SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
  LCD_WR = 0;
  // SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
  LCD_WR = 1;
  
  // Set TFT_nCS high
  // SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit));
  LCD_CS = 1;
}
uint8 Font_ASC8X16[256*16] = {
#ifndef ASC8X16_Use_Display_Char_Only
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0x00
  0x00,0x00,0x7E,0x81,0xA5,0x81,0x81,0xBD,0x99,0x81,0x81,0x7E,0x00,0x00,0x00,0x00,       //0x01
  0x00,0x00,0x7E,0xFF,0xDB,0xFF,0xFF,0xC3,0xE7,0xFF,0xFF,0x7E,0x00,0x00,0x00,0x00,       //0x02
  0x00,0x00,0x00,0x00,0x6C,0xFE,0xFE,0xFE,0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00,       //0x03
  0x00,0x00,0x00,0x00,0x10,0x38,0x7C,0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00,0x00,       //0x04
  0x00,0x00,0x00,0x18,0x3C,0x3C,0xE7,0xE7,0xE7,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x05
  0x00,0x00,0x00,0x18,0x3C,0x7E,0xFF,0xFF,0x7E,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x06
  0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x3C,0x3C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,       //0x07
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xC3,0xC3,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,       //0x08
  0x00,0x00,0x00,0x00,0x00,0x3C,0x66,0x42,0x42,0x66,0x3C,0x00,0x00,0x00,0x00,0x00,       //0x09
  0xFF,0xFF,0xFF,0xFF,0xFF,0xC3,0x99,0xBD,0xBD,0x99,0xC3,0xFF,0xFF,0xFF,0xFF,0xFF,       //0x0A
  0x00,0x00,0x1E,0x0E,0x1A,0x32,0x78,0xCC,0xCC,0xCC,0xCC,0x78,0x00,0x00,0x00,0x00,       //0x0B
  0x00,0x00,0x3C,0x66,0x66,0x66,0x66,0x3C,0x18,0x7E,0x18,0x18,0x00,0x00,0x00,0x00,       //0x0C
  0x00,0x00,0x3F,0x33,0x3F,0x30,0x30,0x30,0x30,0x70,0xF0,0xE0,0x00,0x00,0x00,0x00,       //0x0D
  0x00,0x00,0x7F,0x63,0x7F,0x63,0x63,0x63,0x63,0x67,0xE7,0xE6,0xC0,0x00,0x00,0x00,       //0x0E
  0x00,0x00,0x00,0x18,0x18,0xDB,0x3C,0xE7,0x3C,0xDB,0x18,0x18,0x00,0x00,0x00,0x00,       //0x0F
  0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFE,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,       //0x10
  0x00,0x02,0x06,0x0E,0x1E,0x3E,0xFE,0x3E,0x1E,0x0E,0x06,0x02,0x00,0x00,0x00,0x00,       //0x11
  0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00,0x00,0x00,0x00,0x00,       //0x12
  0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x66,0x66,0x00,0x00,0x00,0x00,       //0x13
  0x00,0x00,0x7F,0xDB,0xDB,0xDB,0x7B,0x1B,0x1B,0x1B,0x1B,0x1B,0x00,0x00,0x00,0x00,       //0x14
  0x00,0x7C,0xC6,0x60,0x38,0x6C,0xC6,0xC6,0x6C,0x38,0x0C,0xC6,0x7C,0x00,0x00,0x00,       //0x15
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFE,0xFE,0xFE,0x00,0x00,0x00,0x00,       //0x16
  0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,0x7E,0x3C,0x18,0x7E,0x00,0x00,0x00,0x00,       //0x17
  0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,       //0x18
  0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00,0x00,0x00,0x00,       //0x19
  0x00,0x00,0x00,0x00,0x00,0x18,0x0C,0xFE,0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,       //0x1A
  0x00,0x00,0x00,0x00,0x00,0x30,0x60,0xFE,0x60,0x30,0x00,0x00,0x00,0x00,0x00,0x00,       //0x1B
  0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,       //0x1C
  0x00,0x00,0x00,0x00,0x00,0x28,0x6C,0xFE,0x6C,0x28,0x00,0x00,0x00,0x00,0x00,0x00,       //0x1D
  0x00,0x00,0x00,0x00,0x10,0x38,0x38,0x7C,0x7C,0xFE,0xFE,0x00,0x00,0x00,0x00,0x00,       //0x1E
  0x00,0x00,0x00,0x00,0xFE,0xFE,0x7C,0x7C,0x38,0x38,0x10,0x00,0x00,0x00,0x00,0x00,       //0x1F
#endif
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0x20' '
  0x00,0x00,0x18,0x3C,0x3C,0x3C,0x18,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,       //0x21'!'
  0x00,0x66,0x66,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0x22'"'
  0x00,0x00,0x00,0x6C,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C,0x6C,0x00,0x00,0x00,0x00,       //0x23'#'
  0x18,0x18,0x7C,0xC6,0xC2,0xC0,0x7C,0x06,0x06,0x86,0xC6,0x7C,0x18,0x18,0x00,0x00,       //0x24'$'
  0x00,0x00,0x00,0x00,0xC2,0xC6,0x0C,0x18,0x30,0x60,0xC6,0x86,0x00,0x00,0x00,0x00,       //0x25'%'
  0x00,0x00,0x38,0x6C,0x6C,0x38,0x76,0xDC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x26'&'
  0x00,0x30,0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0x27'''
  0x00,0x00,0x0C,0x18,0x30,0x30,0x30,0x30,0x30,0x30,0x18,0x0C,0x00,0x00,0x00,0x00,       //0x28'('
  0x00,0x00,0x30,0x18,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x18,0x30,0x00,0x00,0x00,0x00,       //0x29')'
  0x00,0x00,0x00,0x00,0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00,0x00,0x00,0x00,0x00,       //0x2A'*'
  0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,       //0x2B'+'
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x30,0x00,0x00,0x00,       //0x2C','
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0x2D'-'
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,       //0x2E'.'
  0x00,0x00,0x00,0x00,0x02,0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00,0x00,0x00,0x00,       //0x2F'/'
  0x00,0x00,0x38,0x6C,0xC6,0xC6,0xD6,0xD6,0xC6,0xC6,0x6C,0x38,0x00,0x00,0x00,0x00,       //0x30'0'
  0x00,0x00,0x18,0x38,0x78,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x00,0x00,0x00,0x00,       //0x31'1'
  0x00,0x00,0x7C,0xC6,0x06,0x0C,0x18,0x30,0x60,0xC0,0xC6,0xFE,0x00,0x00,0x00,0x00,       //0x32'2'
  0x00,0x00,0x7C,0xC6,0x06,0x06,0x3C,0x06,0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x33'3'
  0x00,0x00,0x0C,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C,0x0C,0x1E,0x00,0x00,0x00,0x00,       //0x34'4'
  0x00,0x00,0xFE,0xC0,0xC0,0xC0,0xFC,0x06,0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x35'5'
  0x00,0x00,0x38,0x60,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x36'6'
  0x00,0x00,0xFE,0xC6,0x06,0x06,0x0C,0x18,0x30,0x30,0x30,0x30,0x00,0x00,0x00,0x00,       //0x37'7'
  0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x38'8'
  0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7E,0x06,0x06,0x06,0x0C,0x78,0x00,0x00,0x00,0x00,       //0x39'9'
  0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,       //0x3A':'
  0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x30,0x00,0x00,0x00,0x00,       //0x3B';'
  0x00,0x00,0x00,0x06,0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x06,0x00,0x00,0x00,0x00,       //0x3C'<'
  0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0x3D'='
  0x00,0x00,0x00,0x60,0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x60,0x00,0x00,0x00,0x00,       //0x3E'>'
  0x00,0x00,0x7C,0xC6,0xC6,0x0C,0x18,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,       //0x3F'?'
  0x00,0x00,0x00,0x7C,0xC6,0xC6,0xDE,0xDE,0xDE,0xDC,0xC0,0x7C,0x00,0x00,0x00,0x00,       //0x40'@'
  0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,       //0x41'A'
  0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x66,0x66,0x66,0x66,0xFC,0x00,0x00,0x00,0x00,       //0x42'B'
  0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xC0,0xC0,0xC2,0x66,0x3C,0x00,0x00,0x00,0x00,       //0x43'C'
  0x00,0x00,0xF8,0x6C,0x66,0x66,0x66,0x66,0x66,0x66,0x6C,0xF8,0x00,0x00,0x00,0x00,       //0x44'D'
  0x00,0x00,0xFE,0x66,0x62,0x68,0x78,0x68,0x60,0x62,0x66,0xFE,0x00,0x00,0x00,0x00,       //0x45'E'
  0x00,0x00,0xFE,0x66,0x62,0x68,0x78,0x68,0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,       //0x46'F'
  0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xDE,0xC6,0xC6,0x66,0x3A,0x00,0x00,0x00,0x00,       //0x47'G'
  0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,       //0x48'H'
  0x00,0x00,0x3C,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x49'I'
  0x00,0x00,0x1E,0x0C,0x0C,0x0C,0x0C,0x0C,0xCC,0xCC,0xCC,0x78,0x00,0x00,0x00,0x00,       //0x4A'J'
  0x00,0x00,0xE6,0x66,0x66,0x6C,0x78,0x78,0x6C,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,       //0x4B'K'
  0x00,0x00,0xF0,0x60,0x60,0x60,0x60,0x60,0x60,0x62,0x66,0xFE,0x00,0x00,0x00,0x00,       //0x4C'L'
  0x00,0x00,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,       //0x4D'M'
  0x00,0x00,0xC6,0xE6,0xF6,0xFE,0xDE,0xCE,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,       //0x4E'N'
  0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x4F'O'
  0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x60,0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,       //0x50'P'
  0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xD6,0xDE,0x7C,0x0C,0x0E,0x00,0x00,       //0x51'Q'
  0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x6C,0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,       //0x52'R'
  0x00,0x00,0x7C,0xC6,0xC6,0x60,0x38,0x0C,0x06,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x53'S'
  0x00,0x00,0x7E,0x7E,0x5A,0x18,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x54'T'
  0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x55'U'
  0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x10,0x00,0x00,0x00,0x00,       //0x56'V'
  0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xD6,0xD6,0xD6,0xFE,0xEE,0x6C,0x00,0x00,0x00,0x00,       //0x57'W'
  0x00,0x00,0xC6,0xC6,0x6C,0x7C,0x38,0x38,0x7C,0x6C,0xC6,0xC6,0x00,0x00,0x00,0x00,       //0x58'X'
  0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x59'Y'
  0x00,0x00,0xFE,0xC6,0x86,0x0C,0x18,0x30,0x60,0xC2,0xC6,0xFE,0x00,0x00,0x00,0x00,       //0x5A'Z'
  0x00,0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,0x00,0x00,0x00,       //0x5B'['
  0x00,0x00,0x00,0x80,0xC0,0xE0,0x70,0x38,0x1C,0x0E,0x06,0x02,0x00,0x00,0x00,0x00,       //0x5C'\'
  0x00,0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00,0x00,0x00,0x00,       //0x5D']'
  0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0x5E'^'
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,       //0x5F'_'
  0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0x60'`'
  0x00,0x00,0x00,0x00,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x61'a'
  0x00,0x00,0xE0,0x60,0x60,0x78,0x6C,0x66,0x66,0x66,0x66,0x7C,0x00,0x00,0x00,0x00,       //0x62'b'
  0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC0,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x63'c'
  0x00,0x00,0x1C,0x0C,0x0C,0x3C,0x6C,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x64'd'
  0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x65'e'
  0x00,0x00,0x38,0x6C,0x64,0x60,0xF0,0x60,0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,       //0x66'f'
  0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0xCC,0xCC,0x7C,0x0C,0xCC,0x78,0x00,       //0x67'g'
  0x00,0x00,0xE0,0x60,0x60,0x6C,0x76,0x66,0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,       //0x68'h'
  0x00,0x00,0x18,0x18,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x69'i'
  0x00,0x00,0x06,0x06,0x00,0x0E,0x06,0x06,0x06,0x06,0x06,0x06,0x66,0x66,0x3C,0x00,       //0x6A'j'
  0x00,0x00,0xE0,0x60,0x60,0x66,0x6C,0x78,0x78,0x6C,0x66,0xE6,0x00,0x00,0x00,0x00,       //0x6B'k'
  0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x6C'l'
  0x00,0x00,0x00,0x00,0x00,0xEC,0xFE,0xD6,0xD6,0xD6,0xD6,0xC6,0x00,0x00,0x00,0x00,       //0x6D'm'
  0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,       //0x6E'n'
  0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x6F'o'
  0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0x66,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00,       //0x70'p'
  0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0xCC,0xCC,0x7C,0x0C,0x0C,0x1E,0x00,       //0x71'q'
  0x00,0x00,0x00,0x00,0x00,0xDC,0x76,0x66,0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,       //0x72'r'
  0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0x60,0x38,0x0C,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x73's'
  0x00,0x00,0x10,0x30,0x30,0xFC,0x30,0x30,0x30,0x30,0x36,0x1C,0x00,0x00,0x00,0x00,       //0x74't'
  0x00,0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x75'u'
  0x00,0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00,0x00,0x00,0x00,       //0x76'v'
  0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xD6,0xD6,0xD6,0xFE,0x6C,0x00,0x00,0x00,0x00,       //0x77'w'
  0x00,0x00,0x00,0x00,0x00,0xC6,0x6C,0x38,0x38,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,       //0x78'x'
  0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7E,0x06,0x0C,0xF8,0x00,       //0x79'y'
  0x00,0x00,0x00,0x00,0x00,0xFE,0xCC,0x18,0x30,0x60,0xC6,0xFE,0x00,0x00,0x00,0x00,       //0x7A'z'
  0x00,0x00,0x0E,0x18,0x18,0x18,0x70,0x18,0x18,0x18,0x18,0x0E,0x00,0x00,0x00,0x00,       //0x7B''
  0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,       //0x7C'|'
  0x00,0x00,0x70,0x18,0x18,0x18,0x0E,0x18,0x18,0x18,0x18,0x70,0x00,0x00,0x00,0x00,       //0x7D''
  0x00,0x00,0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0x7E'~'
  //        0x00,0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xC6,0xFE,0x00,0x00,0x00,0x00,0x00,       //0x7F''
  0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x7E,0x62,0x60,0x60,0xC0,
  //	0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x7C,0x60,0x60,0xC0,0x00,0x00,0x00,       //0xE6		-- Greek (u)
#ifdef ASC8X16_USE_EXTEND_CHARACTER_SET
  0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xC0,0xC2,0x66,0x3C,0x0C,0x06,0x7C,0x00,0x00,       //0x80
  0x00,0x00,0xCC,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x81
  0x00,0x0C,0x18,0x30,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x82
  0x00,0x10,0x38,0x6C,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x83
  0x00,0x00,0xCC,0x00,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x84
  0x00,0x60,0x30,0x18,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x85
  0x00,0x38,0x6C,0x38,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x86
  0x00,0x00,0x00,0x00,0x3C,0x66,0x60,0x60,0x66,0x3C,0x0C,0x06,0x3C,0x00,0x00,0x00,       //0x87
  0x00,0x10,0x38,0x6C,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x88
  0x00,0x00,0xC6,0x00,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x89
  0x00,0x60,0x30,0x18,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x8A
  0x00,0x00,0x66,0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x8B
  0x00,0x18,0x3C,0x66,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x8C
  0x00,0x60,0x30,0x18,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0x8D
  0x00,0xC6,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,       //0x8E
  0x38,0x6C,0x38,0x00,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,       //0x8F
  0x18,0x30,0x60,0x00,0xFE,0x66,0x60,0x7C,0x60,0x60,0x66,0xFE,0x00,0x00,0x00,0x00,       //0x90
  0x00,0x00,0x00,0x00,0x00,0xCC,0x76,0x36,0x7E,0xD8,0xD8,0x6E,0x00,0x00,0x00,0x00,       //0x91
  0x00,0x00,0x3E,0x6C,0xCC,0xCC,0xFE,0xCC,0xCC,0xCC,0xCC,0xCE,0x00,0x00,0x00,0x00,       //0x92
  0x00,0x10,0x38,0x6C,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x93
  0x00,0x00,0xC6,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x94
  0x00,0x60,0x30,0x18,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x95
  0x00,0x30,0x78,0xCC,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x96
  0x00,0x60,0x30,0x18,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0x97
  0x00,0x00,0xC6,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7E,0x06,0x0C,0x78,0x00,       //0x98
  0x00,0xC6,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x99
  0x00,0xC6,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0x9A
  0x00,0x18,0x18,0x3C,0x66,0x60,0x60,0x60,0x66,0x3C,0x18,0x18,0x00,0x00,0x00,0x00,       //0x9B
  0x00,0x38,0x6C,0x64,0x60,0xF0,0x60,0x60,0x60,0x60,0xE6,0xFC,0x00,0x00,0x00,0x00,       //0x9C
  0x00,0x00,0x66,0x66,0x3C,0x18,0x7E,0x18,0x7E,0x18,0x18,0x18,0x00,0x00,0x00,0x00,       //0x9D
  0x00,0xF8,0xCC,0xCC,0xF8,0xC4,0xCC,0xDE,0xCC,0xCC,0xCC,0xC6,0x00,0x00,0x00,0x00,       //0x9E
  0x00,0x0E,0x1B,0x18,0x18,0x18,0x7E,0x18,0x18,0x18,0x18,0x18,0xD8,0x70,0x00,0x00,       //0x9F
  0x00,0x18,0x30,0x60,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0xA0
  0x00,0x0C,0x18,0x30,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,       //0xA1
  0x00,0x18,0x30,0x60,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0xA2
  0x00,0x18,0x30,0x60,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,       //0xA3
  0x00,0x00,0x76,0xDC,0x00,0xDC,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,       //0xA4
  0x76,0xDC,0x00,0xC6,0xE6,0xF6,0xFE,0xDE,0xCE,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,       //0xA5
  0x00,0x3C,0x6C,0x6C,0x3E,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xA6
  0x00,0x38,0x6C,0x6C,0x38,0x00,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xA7
  0x00,0x00,0x30,0x30,0x00,0x30,0x30,0x60,0xC0,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,       //0xA8
  0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,       //0xA9
  0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x06,0x06,0x06,0x06,0x00,0x00,0x00,0x00,0x00,       //0xAA
  0x00,0xC0,0xC0,0xC2,0xC6,0xCC,0x18,0x30,0x60,0xDC,0x86,0x0C,0x18,0x3E,0x00,0x00,       //0xAB
  0x00,0xC0,0xC0,0xC2,0xC6,0xCC,0x18,0x30,0x66,0xCE,0x9E,0x3E,0x06,0x06,0x00,0x00,       //0xAC
  0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x18,0x3C,0x3C,0x3C,0x18,0x00,0x00,0x00,0x00,       //0xAD
  0x00,0x00,0x00,0x00,0x00,0x36,0x6C,0xD8,0x6C,0x36,0x00,0x00,0x00,0x00,0x00,0x00,       //0xAE
  0x00,0x00,0x00,0x00,0x00,0xD8,0x6C,0x36,0x6C,0xD8,0x00,0x00,0x00,0x00,0x00,0x00,       //0xAF
  0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,       //0xB0
  0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,       //0xB1
  0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,       //0xB2
  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xB3
  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xB4
  0x18,0x18,0x18,0x18,0x18,0xF8,0x18,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xB5
  0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xF6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xB6
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xB7
  0x00,0x00,0x00,0x00,0x00,0xF8,0x18,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xB8
  0x36,0x36,0x36,0x36,0x36,0xF6,0x06,0xF6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xB9
  0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xBA
  0x00,0x00,0x00,0x00,0x00,0xFE,0x06,0xF6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xBB
  0x36,0x36,0x36,0x36,0x36,0xF6,0x06,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xBC
  0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xBD
  0x18,0x18,0x18,0x18,0x18,0xF8,0x18,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xBE
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xBF
  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xC0
  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xC1
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xC2
  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xC3
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xC4
  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xC5
  0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x1F,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xC6
  0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xC7
  0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xC8
  0x00,0x00,0x00,0x00,0x00,0x3F,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xC9
  0x36,0x36,0x36,0x36,0x36,0xF7,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xCA
  0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xF7,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xCB
  0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xCC
  0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xCD
  0x36,0x36,0x36,0x36,0x36,0xF7,0x00,0xF7,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xCE
  0x18,0x18,0x18,0x18,0x18,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xCF
  0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xD0
  0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xD1
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xD2
  0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xD3
  0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xD4
  0x00,0x00,0x00,0x00,0x00,0x1F,0x18,0x1F,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xD5
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xD6
  0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFF,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,       //0xD7
  0x18,0x18,0x18,0x18,0x18,0xFF,0x18,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xD8
  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xD9
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xDA
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,       //0xDB
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,       //0xDC
  0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,       //0xDD
  0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,       //0xDE
  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xDF
  0x00,0x00,0x00,0x00,0x00,0x76,0xDC,0xD8,0xD8,0xD8,0xDC,0x76,0x00,0x00,0x00,0x00,       //0xE0
  0x00,0x00,0x78,0xCC,0xCC,0xCC,0xD8,0xCC,0xC6,0xC6,0xC6,0xCC,0x00,0x00,0x00,0x00,       //0xE1
  0x00,0x00,0xFE,0xC6,0xC6,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,       //0xE2
  0x00,0x00,0x00,0x00,0xFE,0x6C,0x6C,0x6C,0x6C,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,       //0xE3
  0x00,0x00,0x00,0xFE,0xC6,0x60,0x30,0x18,0x30,0x60,0xC6,0xFE,0x00,0x00,0x00,0x00,       //0xE4
  0x00,0x00,0x00,0x00,0x00,0x7E,0xD8,0xD8,0xD8,0xD8,0xD8,0x70,0x00,0x00,0x00,0x00,       //0xE5
  0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x7C,0x60,0x60,0xC0,0x00,0x00,0x00,       //0xE6	-- (u) micro
  0x00,0x00,0x00,0x00,0x76,0xDC,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,       //0xE7
  0x00,0x00,0x00,0x7E,0x18,0x3C,0x66,0x66,0x66,0x3C,0x18,0x7E,0x00,0x00,0x00,0x00,       //0xE8
  0x00,0x00,0x00,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0x6C,0x38,0x00,0x00,0x00,0x00,       //0xE9
  0x00,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0x6C,0x6C,0x6C,0x6C,0xEE,0x00,0x00,0x00,0x00,       //0xEA
  0x00,0x00,0x1E,0x30,0x18,0x0C,0x3E,0x66,0x66,0x66,0x66,0x3C,0x00,0x00,0x00,0x00,       //0xEB
  0x00,0x00,0x00,0x00,0x00,0x7E,0xDB,0xDB,0xDB,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,       //0xEC
  0x00,0x00,0x00,0x03,0x06,0x7E,0xDB,0xDB,0xF3,0x7E,0x60,0xC0,0x00,0x00,0x00,0x00,       //0xED
  0x00,0x00,0x1C,0x30,0x60,0x60,0x7C,0x60,0x60,0x60,0x30,0x1C,0x00,0x00,0x00,0x00,       //0xEE
  0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,       //0xEF
  0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0xFE,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,       //0xF0
  0x00,0x00,0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,       //0xF1
  0x00,0x00,0x00,0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x00,0x7E,0x00,0x00,0x00,0x00,       //0xF2
  0x00,0x00,0x00,0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x00,0x7E,0x00,0x00,0x00,0x00,       //0xF3
  0x00,0x00,0x0E,0x1B,0x1B,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,       //0xF4
  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xD8,0xD8,0xD8,0x70,0x00,0x00,0x00,0x00,       //0xF5
  0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x7E,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,       //0xF6
  0x00,0x00,0x00,0x00,0x00,0x76,0xDC,0x00,0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00,       //0xF7
  0x00,0x38,0x6C,0x6C,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xF8
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xF9
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xFA
  0x00,0x0F,0x0C,0x0C,0x0C,0x0C,0x0C,0xEC,0x6C,0x6C,0x3C,0x1C,0x00,0x00,0x00,0x00,       //0xFB
  0x00,0xD8,0x6C,0x6C,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xFC
  0x00,0x70,0xD8,0x30,0x60,0xC8,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,       //0xFD
  0x00,0x00,0x00,0x00,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00,       //0xFE
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00        //0xFF
#endif
};
FONT ASC8X16 = {
  Font_ASC8X16,
  8,
  16,
  8,
  16,
  0x20
};
void	SetWindow(uint16 x, uint16 xsize, uint16 y, uint16 ysize)
{
  write_comm(0x2A);
  
  write_data(x >> 8);
  write_data(x);
  x = x + xsize - 1;
  write_data(x >> 8);
  write_data(x);
  
  
  write_comm(0x2B);
  write_data(y >> 8);
  write_data(y);
  y = y + ysize - 1;
  write_data(y >> 8);
  write_data(y);
}

void	PutcGenic(uint16 x, uint16 y, uint8 ch, uint16 fgcolor, uint16 bgcolor, FONT *font)
{
  uint8 tmp, tmp2;
  uint16 tmp1, tmp3;
  uint8 *ptmp;
  
  // Font address
  ptmp = (uint8 *)font->Array + (ch - font->IndexOfs) * ((font->Xsize + 7)/8) * font->Ysize;
  SetWindow(x, font->Xsize, y, font->Ysize);
  LCD_CS = 0;
  LCD_RS = 0;
  DATAOUT(0x2C);
  LCD_WR = 0;
  LCD_WR = 1;
  LCD_RS = 1;
  tmp1 = (font->Xsize * font->Ysize)/8;
  while(tmp1) 
  {
    tmp = *ptmp;
    tmp2 = 8;
    while(tmp2) 
    {
      tmp3 = (tmp & 0x80) ? fgcolor : bgcolor;
      DATAOUT(tmp3);
      LCD_WR = 0;
      LCD_WR = 1;
      // DATAOUT((GPIOE->ODR & 0xFF00)|(tmp3));
      //// 		SetToLow(TFT_nWR_Port, (1 << TFT_nWR_Bit));
      // LCD_WR = 0;
      //// 		SetToHigh(TFT_nWR_Port, (1 << TFT_nWR_Bit));
      // LCD_WR = 1;
      
      tmp <<= 1;
      tmp2--;
    }
    ptmp++;
    tmp1--;	
  }
  // SetToHigh(TFT_nCS_Port, (1 << TFT_nCS_Bit)); 
  LCD_CS = 1;
}

void	PutsGenic(uint16 x, uint16 y, uint8 *str, uint16 fgcolor, uint16 bgcolor, FONT *font)
{
  uint8 tmp;
  
  while((tmp = *str++)) {
    PutcGenic(x, y, tmp, fgcolor, bgcolor, font);
    x += font->CharPitch;
    if(x >= 320) {
      y += font->LinePitch;
      x = 0;
    }
  }
}

void LCD_GPIO_Init()
{
  PTXn_e pin;                                   //PTB1,2,3,7,8,9,10,11,16……23作为16位数据总线
  for(pin=PE0; pin<=PE15; ++pin)              //数据总线初始化；即使有些数据位没有对应的端口，任然全部写一遍，否则你挨个儿写初始化给我看看？
    gpio_init(pin,Out_PP,n_interupt,GPIO_Speed_50MHz,0);
  //8080控制总线（RES复位;DC数据/命令;CS片选;WR写;RD读）端口+背光端口初始化  
  
  gpio_init(LCD_RST_PIN,Out_PP,n_interupt,GPIO_Speed_50MHz,1);
  gpio_init(LCD_CS_PIN,Out_PP,n_interupt,GPIO_Speed_50MHz,1);
  gpio_init(LCD_DC_PIN,Out_PP,n_interupt,GPIO_Speed_50MHz,1);
  gpio_init(LCD_WR_PIN,Out_PP,n_interupt,GPIO_Speed_50MHz,1);
  gpio_init(LCD_RD_PIN,Out_PP,n_interupt,GPIO_Speed_50MHz,1);
  TIM1_PWM_Init(1000,10000,2000);                       //背光亮度控制引脚
}
//把lcddev变量里的参数与ILI9341对应起来
void Lcd_ILI9341_Parameter_Init(u8 direction, PLCD_DEV ld)
{
  if(0==direction|| 3==direction)			//竖屏
  {
    ld->width=240;
    ld->height=320;
  }
  else if(5==direction || 6==direction)			//横屏
  {
    ld->width=320;
    ld->height=240;
  }else while(1);
  ld->dir = direction;
  ld->wramcmd=0x2C;                     //写GRAM指令，参数就是颜色数据
  ld->setxcmd=0x2A;                     //列地址设置指令，参数详情参看手册
  ld->setycmd=0x2B;                     //页地址设置指令
  ld->DEFAULT_BACK_COLOR = WHITE;       //LCD默认底色
  ld->DEFAULT_POINT_COLOR = RED;        //默认显示色
}
//清屏函数
//color:要清屏的填充色
void LCD_Clear(PLCD_DEV ld, u16 color)
{
  u32 index=0;
  u32 totalpoint=ld->width;
  totalpoint*=ld->height; 			//得到总点数
  LCD_Area_Set(0, 0, ld->width-1, ld->height-1);	                //设置area  
  LCD_WR_REG(lcddev.wramcmd);     		//开始写入GRAM	  	  
  for(index=0; index<totalpoint; index++)
    LCD_WR_DATA(color);
  lcddev.DEFAULT_BACK_COLOR = color;
}
//在指定区域内填充指定颜色
//区域大小:(xend-xsta+1)*(yend-ysta+1),如果输入的终点横（纵）坐标小于起点横（纵）坐标，那么将自动判断大小，意味着无需按照先后顺序
//xsta
//color:要填充的颜色
void LCD_Fill(char dir,u16 sx,u16 ex,u16 sy,u16 ey,u16 color)
{//填充区域超过液晶屏最大值将不会画出超出部分，但是不能小于0，因为是无符号类型，负数将变最大正数
  u16 tmp;
  if(ex<sx)
  {
    tmp = sx;
    sx = ex;
    ex = tmp;
  }
  if(ey<sy)
  {
    tmp = sy;
    sy = ey;
    ey = tmp;
  }    

  u32 i, j = (ex - sx +1) * (ey - sy + 1);
  if(0==dir)
  {
    tmp = sx;
    sx = lcddev.width - 1 - ex;
    ex = lcddev.width - 1 - tmp;
    
    tmp = sy;
    sy = lcddev.height - 1 - ey;
    ey = lcddev.height - 1 - tmp;
  }  else;
  
  LCD_Area_Set(sx, sy, ex, ey);
  LCD_WR_REG(lcddev.wramcmd);     			//开始写入GRAM
  for(i=0;i<j;i++)
    LCD_WR_DATA(color);	//设置光标位置 	
}

//画指针
//dir:屏幕方向
//x，y：指针尖端坐标
//point_direction：三角形指向方向
void LCDDrawPointer(char dir, u16 x,u16 y, char point_direction,u16 color)
{
  uint16 height = 11;
  uint16 length = 15;
  height /= 2;
  uint16 i = 0,j = 0;
  if(dir)
  {
    switch (point_direction)
    {
    case 0:
      for(i=0;i<height;i++)
      {
        LCD_SetCursor(x-length,y+i);   	//设置光标位置 
        LCD_WR_REG(lcddev.wramcmd);     //开始写入GRAM
        for(j=0;j<length-i;j++)
          LCD_WR_DATA(color);//写入数据 
        LCD_SetCursor(x-length,y-i);   	//设置光标位置 
        LCD_WR_REG(lcddev.wramcmd);     //开始写入GRAM
        for(j=0;j<length-i;j++)
          LCD_WR_DATA(color);//写入数据 
      }	  
      break;
    case 1:
      {
        for(i=0;i<height;i++)
        {
          LCD_SetCursor(x+i,y+i);   	//设置光标位置 
          LCD_WR_REG(lcddev.wramcmd);     //开始写入GRAM
          for(j=0;j<length-i;j++)
            LCD_WR_DATA(color);//写入数据 
          LCD_SetCursor(x+i,y-i);   	//设置光标位置 
          LCD_WR_REG(lcddev.wramcmd);     //开始写入GRAM
          for(j=0;j<length-i;j++)
            LCD_WR_DATA(color);//写入数据
        }
      }break;
    default:break;
    };
  }
  else
  {
  }
}

//在指定区域内填充指定颜色块			 
//dir:direction of screen,there is only two directions,both are 横屏,正视屏幕排线位于左手位0方向，左上角为坐标00
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
//color:要填充的颜色
void LCD_Color_Fill(char dir, u16 sx,u16 sy,u16 ex,u16 ey, u16 color)
{
  u16 height,width;
  u16 i,j;
  width=ex-sx+1; 			//得到填充的宽度
  height=-(ey-sy)+1;			//高度
  if(0==dir)
  {
    sx = lcddev.width-ex;
    sy = lcddev.height-sy;
    for(i=0;i<height;i++)
    {
      LCD_SetCursor(sx,sy+i);   	//设置光标位置 
      LCD_WR_REG(lcddev.wramcmd);     //开始写入GRAM
      for(j=0;j<width-1;j++)
        LCD_WR_DATA(color);//写入数据 
    }
  }
  else
  {
//    sx = sx;
//    sy = lcddev.height-height;
    for(i=0;i<height;i++)
    {
      LCD_SetCursor(sx,sy-i);   	//设置光标位置 
      LCD_WR_REG(lcddev.wramcmd);     //开始写入GRAM
      for(j=0;j<width;j++)
        LCD_WR_DATA(color);//写入数据 
    }	  
  }
} 
//画线
//x1,y1:起点坐标
//x2,y2:终点坐标  
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
{
  u16 t; 
  int xerr=0,yerr=0,delta_x,delta_y,distance; 
  int incx,incy,uRow,uCol; 
  delta_x=x2-x1; //计算坐标增量 
  delta_y=y2-y1; 
  uRow=x1; 
  uCol=y1; 
  if(delta_x>0)incx=1; //设置单步方向 
  else if(delta_x==0)incx=0;//垂直线 
  else {incx=-1;delta_x=-delta_x;} 
  if(delta_y>0)incy=1; 
  else if(delta_y==0)incy=0;//水平线 
  else{incy=-1;delta_y=-delta_y;} 
  if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
  else distance=delta_y; 
  for(t=0;t<=distance+1;t++ )//画线输出 
  {  
    LCD_DrawPoint(uRow,uCol, color);//画点 
    xerr+=delta_x ; 
    yerr+=delta_y ; 
    if(xerr>distance) 
    { 
      xerr-=distance; 
      uRow+=incx; 
    } 
    if(yerr>distance) 
    { 
      yerr-=distance; 
      uCol+=incy; 
    } 
  }  
}    
//画矩形	  
//(x1,y1),(x2,y2):矩形的对角坐标
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
{
  LCD_DrawLine(x1,y1,x2,y1, color);
  LCD_DrawLine(x1,y1,x1,y2, color);
  LCD_DrawLine(x1,y2,x2,y2, color);
  LCD_DrawLine(x2,y1,x2,y2, color);
}
//在指定位置画一个指定大小的圆
//(x,y):中心点
//r    :半径
void LCD_Draw_Circle(u16 x0,u16 y0,u8 r, u16 color)
{
  int a,b;
  int di;
  a=0;b=r;	  
  di=3-(r<<1);             //判断下个点位置的标志
  while(a<=b)
  {
    LCD_DrawPoint(x0+a,y0-b, color);             //5
    LCD_DrawPoint(x0+b,y0-a, color);             //0           
    LCD_DrawPoint(x0+b,y0+a, color);             //4               
    LCD_DrawPoint(x0+a,y0+b, color);             //6 
    LCD_DrawPoint(x0-a,y0+b, color);             //1       
    LCD_DrawPoint(x0-b,y0+a, color);             
    LCD_DrawPoint(x0-a,y0-b, color);             //2             
    LCD_DrawPoint(x0-b,y0-a, color);             //7     	         
    a++;
    //使用Bresenham算法画圆     
    if(di<0)di +=4*a+6;	  
    else
    {
      di+=10+4*(a-b);   
      b--;
    } 						    
  }
} 									  
//在指定位置显示一个字符
//dir:direction of screen,there is only two directions,both are 横屏,正视屏幕排线位于左手位0方向，左上角为坐标00
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24(12x24)
//mode:叠加方式(0)还是非叠加方式(1)
char LCD_ShowChar(char dir,u16 x,u16 y,u8 num, CHAR_SIZE size, u8 mode, u16 color, u16 bcolor)
{
//  if(x>319 || y>239)
//    while(1);
  u8 temp,t1,t;
  u16 y0=y;
  u8 csize=(size/8+((size%8)?1:0))*(size/2);	//得到字体一个字符对应点阵集所占的字节数	
  num = num - ' ';                                //得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
  if(0==dir)
    for(t=0;t<csize;t++)
    {
      if(size==c1206)
        temp=asc2_1206[num][t]; 	//调用1206字体
      else if(size==c1608)
        temp=asc2_1608[num][t];	//调用1608字体
      else if(size==c2412)
        temp=asc2_2412[num][t];	//调用2412字体
      else return false;				//没有的字库
      for(t1=0;t1<8;t1++)
      {
        if(temp&0x80)
          LCD_DrawPoint(lcddev.width-x,lcddev.height-y,color);
        else if(mode==0)
          LCD_DrawPoint(lcddev.width-x,lcddev.height-y,bcolor);
        else;
        temp<<=1;
        y++;
        if(y>=lcddev.height)
        {
          y=y0;
          x++;
          break;		//超区域了
        }
        if((y-y0)==size)
        {
          y=y0;
          x++;
          if(x>=lcddev.width)
            break;	//超区域了
        }
      }  	 
    }
  else
    for(t=0;t<csize;t++)
    {
      if(size==c1206)
        temp=asc2_1206[num][t]; 	//调用1206字体
      else if(size==c1608)
        temp=asc2_1608[num][t];	//调用1608字体
      else if(size==c2412)
        temp=asc2_2412[num][t];	//调用2412字体
      else return false;				//没有的字库
      for(t1=0;t1<8;t1++)
      {
        if(temp&0x80)
          LCD_DrawPoint(x,y,color);
        else if(mode==0)
          LCD_DrawPoint(x,y,bcolor);
        else;
        temp<<=1;
        y++;
//        if(y>=lcddev.height)
//        {
//          y=y0;
//          x++;
//          break;		//超区域了
//        }
        if((y-y0)==size)        //判断是否到达了底部，如1206，一列只有12个像素（共6列），用两个字节存，第二个字节的后四位是无用的
        {
          y=y0;
          x++;
            break;
        }
      }  	 
    }
  
  return true;
}

//m^n函数
//返回值:m^n次方.
u32 LCD_Pow(u8 m,u8 n)
{
  u32 result=1;	 
  while(n--)result*=m;    
  return result;
}			 
//显示数字,高位为0,则不显示
//x,y :起点坐标
//len :数字的位数
//size:字体大小
//color:颜色 
//num:数值(0~4294967295);	 
void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,CHAR_SIZE size, u16 color, u16 bcolor)
{
  u8 t,temp;
  u8 enshow=0;
  for(t=0;t<len;t++)
  {
    temp=(num/LCD_Pow(10,len-t-1))%10;
    if(enshow==0&&t<(len-1))
    {
      if(temp==0)
      {
        LCD_ShowChar(0,x+(size/2)*t,y,' ',size,0, color, bcolor);
        continue;
      }else enshow=1; 
      
    }
    LCD_ShowChar(0,x+(size/2)*t,y,temp+'0',size,0, color, bcolor); 
  }
}
/****,坐标X, Y，待显示的数字t(最多显示?位)，小数点后面多少位bit，数据的单位//表面颜色，背景颜色************/
void LCD_Show_Float(char dir,PDATA_POSITION pd_p, float t, char *P, u16 fcolor, u16 bcolor)
{
  char str[128] = {0};
  snprintf(str,5,"%.2f",t);
  strcat(str,P);
    LCD_ShowString(dir, pd_p->x, pd_p->y, pd_p->size, 0,str, fcolor,bcolor);
return ;

//  u16 x = pd_p->x; u16 y = pd_p->y;
//  int i = 0;
//  for(i=0;i<pd_p->show_after_decimal;i++)
//    t *= 10;  
//  //    ASSERT(t<9999999999);           //超出数组会越界，因为int本来就不超过十位数，所以不用
//  
//  char first_flag = false;
//  int j = 0;
//  u8 num[11] = {0};
//  i=0;
//  while((num[i] = (int)t%10), (int)(t/=10))             //存各位数字并且找出位数,i比实际位数少一位
//    ++i;
//  
//  if(i < pd_p->data_bit)                               //算上单位（当然，单位的长度最好不变）比上一次显示的位数少
//    LCD_Fill(dir, x, (uint16)(x + pd_p->size/2 * (pd_p->data_bit+2 + pd_p->unit_bit)), y, y+pd_p->size, RED);        //刷新上次显示的整个长度，包括单位
//  pd_p->data_bit = i;                                  //i比实际位数少一位
//  
//  for(i=9; i>=0; --i)
//  {    
//    if(!num[i] && !first_flag && i>pd_p->show_after_decimal)continue;
//    first_flag = true;
//    if(pd_p->show_after_decimal-1!=i)
//      LCD_ShowChar(dir,x + pd_p->size / 2 * j, y, num[i] + 48, pd_p->size, 0, fcolor, bcolor);
//    else
//    {
////      LCD_ShowChar(dir,x + pd_p->size / 2 * j, y, '.', pd_p->size, 0, fcolor, bcolor);
//      ++j;
////      LCD_ShowChar(dir,x + pd_p->size / 2 * j, y, num[i] + 48, pd_p->size, 0, fcolor, bcolor);
//    }
//    ++j;
//  }
//  if(*P)
//    LCD_ShowString(dir, x + pd_p->size / 2 * j, y, pd_p->size, 0,P, fcolor,bcolor);
}
//显示数字,高位为0,还是显示
//x,y:起点坐标
//num:数值(0~999999999);	 
//len:长度(即要显示的位数)
//size:字体大小
//mode:
//[7]:0,不填充;1,填充0.
//[6:1]:保留
//[0]:0,非叠加显示;1,叠加显示.
void LCD_ShowxNum(char dir,u16 x,u16 y,u32 num,u8 len,CHAR_SIZE size,u8 mode, u16 color)
{
  u8 t,temp;
  u8 enshow=0;						   
  for(t=0;t<len;t++)
  {
    temp=(num/LCD_Pow(10,len-t-1))%10;
    if(enshow==0&&t<(len-1))
    {
      if(temp==0)
      {
        if(mode&0x80)
          LCD_ShowChar(dir,x+(size/2)*t,y,'0',size,mode&0X01, color, YELLOW);  
        else
          LCD_ShowChar(dir,x+(size/2)*t,y,' ',size,mode&0X01, color, lcddev.DEFAULT_BACK_COLOR);  
        continue;
      }else enshow=1;
    }
    LCD_ShowChar(dir,x+(size/2)*t, y, temp+'0', size, mode&0X01, color, lcddev.DEFAULT_BACK_COLOR); 
  }
} 
//显示字符串
//x,y:起点坐标
//width,height:区域大小  
//size:字体大小12,16,24
//*p:字符串起始地址		  
void LCD_ShowString(char dir, u16 x, u16 y, CHAR_SIZE size, u8 mode, char *p, u16 color, u16 bcolor)
{
  u8 x0 = x;
  //  width+=x;
  //  height+=y;
  while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
  {
    if(x>=lcddev.width)         //超出x范围
    {
      x=x0;y+=size;
    }
    //    if(y>=height)break;//退出
    LCD_ShowChar(dir, x, y, *p, size, mode, color, bcolor);
    x+=size/2;
    p++;
  }
}
